module Decl

imports
  Lexical Type Guard Stm

exports
  sorts Decl
  context-free syntax

	"var" Id ":" Type ";"		-> Decl			{cons("VarDec")}
	"var" Id ":" Type ":=" Exp ";"	-> Decl			{cons("VarDec")}
	Id ":" Type "=" Exp ";"		-> Decl			{cons("ConsDec")}
	Id ":" Type ";"			-> Decl			{cons("ConsDec")}

	Id ":" "(" {(Id ":" Type) ","}* ")" "->" Type
	"=" "{" Stm* "}"		-> Decl			{cons("FunDec")}

	Id ":" "[" {(Id ":" Type Guard) ","}* "]" "->" Type
	"=" "{" Stm* "}"		-> Decl			{cons("StaticFunDec")}

	Id ":" "[" {(Id ":" Type Guard) ","}* "]" "(" {(Id ":" Type) ","}* ")" "->" Type
	"=" "{" Stm* "}"		-> Decl			{cons("BiFunDec")}

	Id ":" "(" {(Id ":" Type) ","}* ")" "->" Type
	"=>" Exp			-> Decl			{cons("FunDec")}

	Id ":" "[" {(Id ":" Type Guard) ","}* "]" "->" Type
	"=>" Exp			-> Decl			{cons("StaticFunDec")}

	Id ":" "[" {(Id ":" Type Guard) ","}* "]" "(" {(Id ":" Type) ","}* ")" "->" Type
	"=>" Exp			-> Decl			{cons("BiFunDec")}


	"decl" Id ":" "(" {(Type | (Id ":" Type)) ","}* ")"
	"->" Type ";"			-> Decl			{cons("FunPreDec")}


	Id ":" "[" {(Id ":" Type) ","}* "]" "->" Type
	"=" "{" Stm* "}"		-> Decl			{cons("StaticFunDec")}

	Id ":" "[" {(Id ":" Type) ","}* "]" "(" {(Id ":" Type) ","}* ")" "->" Type
	"=" "{" Stm* "}"		-> Decl			{cons("BiFunDec")}

	Id ":" "[" {(Id ":" Type) ","}* "]" "->" Type
	"=>" Exp			-> Decl			{cons("StaticFunDec")}

	Id ":" "[" {(Id ":" Type) ","}* "]" "(" {(Id ":" Type) ","}* ")" "->" Type
	"=>" Exp			-> Decl			{cons("BiFunDec")}