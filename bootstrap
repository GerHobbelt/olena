#! /bin/sh

fatal ()
{
  echo >&2 "$0: $@"
  exit 1
}

stderr ()
{
    echo >&2 "$0: $@"
}

awk_strverscmp='
  # Use only awk features that work with 7th edition Unix awk (1978).
  # My, what an old awk you have, Mr. Solaris!
  END {
    while (length(v1) || length(v2)) {
      # Set d1 to be the next thing to compare from v1, and likewise for d2.
      # Normally this is a single character, but if v1 and v2 contain digits,
      # compare them as integers and fractions as strverscmp does.
      if (v1 ~ /^[0-9]/ && v2 ~ /^[0-9]/) {
	# Split v1 and v2 into their leading digit string components d1 and d2,
	# and advance v1 and v2 past the leading digit strings.
	for (len1 = 1; substr(v1, len1 + 1) ~ /^[0-9]/; len1++) continue
	for (len2 = 1; substr(v2, len2 + 1) ~ /^[0-9]/; len2++) continue
	d1 = substr(v1, 1, len1); v1 = substr(v1, len1 + 1)
	d2 = substr(v2, 1, len2); v2 = substr(v2, len2 + 1)
	if (d1 ~ /^0/) {
	  if (d2 ~ /^0/) {
	    # Compare two fractions.
	    while (d1 ~ /^0/ && d2 ~ /^0/) {
	      d1 = substr(d1, 2); len1--
	      d2 = substr(d2, 2); len2--
	    }
	    if (len1 != len2 && ! (len1 && len2 && substr(d1, 1, 1) == substr(d2, 1, 1))) {
	      # The two components differ in length, and the common prefix
	      # contains only leading zeros.  Consider the longer to be less.
	      d1 = -len1
	      d2 = -len2
	    } else {
	      # Otherwise, compare as strings.
	      d1 = "x" d1
	      d2 = "x" d2
	    }
	  } else {
	    # A fraction is less than an integer.
	    exit 1
	  }
	} else {
	  if (d2 ~ /^0/) {
	    # An integer is greater than a fraction.
	    exit 2
	  } else {
	    # Compare two integers.
	    d1 += 0
	    d2 += 0
	  }
	}
      } else {
	# The normal case, without worrying about digits.
	if (v1 == "") d1 = v1; else { d1 = substr(v1, 1, 1); v1 = substr(v1,2) }
	if (v2 == "") d2 = v2; else { d2 = substr(v2, 1, 1); v2 = substr(v2,2) }
      }
      if (d1 < d2) exit 1
      if (d1 > d2) exit 2
    }
  }
'

version_compare ()
{
  awk "$awk_strverscmp" v1="$1" v2="$2" /dev/null
  case $? in
    1)  echo '<';;
    0)  echo '=';;
    2)  echo '>';;
  esac
}

# require TOOL REQUIREMENT [OPTION]
# ---------------------------------
# Test that TOOL exists, and its version is at least REQUIREMENT.
# If given, use OPTION to query TOOL; use `--version' otherwise.
require ()
{
  local option
  if test $# -eq 3; then option=$3; else option=--version; fi
  local version=$($1 $option | sed -n 's/[^0-9.]*\([0-9][0-9.]*\).*/\1/p;q')
  test x"$version" != x ||
    fatal "$1 (version $2 or better) is required"
  case $(version_compare "$2" "$version") in
    '>') fatal "$1 $2 or better is required: this is $1 $version";;
  esac
}

# run DIRECTORY COMMAND-LINE
# --------------------------
run ()
{
    (
        set -e
        stderr "$@"
        cd "$1"
        shift
        if ! "$@"; then
            fatal "unexpected failure: $@"
            exit 1
        fi
    )
}


# Failures do matter.
set -e

# Requirements over bootstrap tools.
require autoconf 2.61
require automake 1.10
libtoolize=libtoolize
for l in "$LIBTOOLIZE" glibtoolize libtoolize;
do
  if ($l --version) >/dev/null 2>&1; then
    libtoolize=$l
    break
  fi
done
export LIBTOOLIZE=$libtoolize
require $libtoolize 1.5.22

require doxygen 1.5.6
require convert 6.3.7

# Check for TeX4ht.  htlatex and friends do not have options like
# `--version', `-version', `-v', etc.  Hence this ad hoc procedure.
tempdir=`mktemp -d`
# Set up automatic cleanup.
cleanup() { rm -rf "$tempdir"; exit; }
trap cleanup 0 1 2 3 6 15
(
  cd "$tempdir"
  cat >test.tex <<EOF
  \documentclass{article}
  \begin{document}
  Test
  \end{document}
EOF
  htlatex >/dev/null 2>&1 test.tex || fatal "TeX4ht is required"
)
# dvipng is required by TeX4ht.
require dvipng 1.11

# Generate milena/headers.mk
run milena `pwd`/build-aux/generate_dist_headers.sh mln ./headers.mk ./nodist-headers

# Generate scribo/headers.mk
run scribo `pwd`/build-aux/generate_dist_headers.sh . headers.mk nodist-headers scribo scribo

# Generate lists of files to be part of the distribution
# for the tutorial.
# * Figures.
gen_doc_figures()
{
  milena/doc/gen-make-variable "$1"					\
    `find milena/doc/figures/*.$2 | sed 's,^milena/doc,\$(srcdir),'`	\
    >"milena/doc/$2-figures.mk"						\
  || fatal "unexpected failure: $@"
}
gen_doc_figures PBM_FIGURES pbm
gen_doc_figures PGM_FIGURES pgm
gen_doc_figures PPM_FIGURES ppm
run milena/doc/ ./generate_dist_files.sh outputs txt
# * Examples.
milena/doc/gen-make-variable EXAMPLES					    \
  `find milena/doc/examples -name '*.cc' | sed 's,^milena/doc,\$(srcdir),'` \
  >milena/doc/examples.mk
# * Split examples.
cd milena/doc && ./gen-split-examples-mk >split-examples.mk
# * Outputs.
milena/doc/gen-make-variable OUTPUTS				\
  `find milena/doc/examples					\
       -name \*.cc -a \! -path milena/doc/examples/trash/\*	\
     | sed -e 's,milena/doc/examples/,,'			\
           -e 'y,/,_,'						\
           -e 's,\(.*\)\.cc$,milena/doc/outputs/\1.txt,'`	\
  >milena/doc/outputs.mk
# * Outputs rules and timestamps.
cd milena/doc &&						\
  ./gen-examples-outputs-mk					\
    `find examples -name \*.cc -a \! -path examples/trash/\*	\
       | env LC_ALL=C sort`					\
    >examples-outputs.mk
# * Split outputs.
cd milena/doc && ./gen-split-outputs-mk >split-outputs.mk

# Generate unit test files.
run . ./build-aux/build_unit_test.sh `pwd`/milena/mln milena/tests/unit_test milena/tests/unit_test/disabled_tests

# Generate unit test files for Scribo.
run scribo/tests/unit_test ./build_unit_test.sh `pwd`/scribo .

# Install the GNU Build System.
autoreconf -f -v -i
