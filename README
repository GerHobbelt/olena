Copyright (C) 2009 EPITA Research and Development Laboratory (LRDE)

This file is part of Olena.

Olena is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, version 2 of the License.

Olena is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with Olena.  If not, see <http://www.gnu.org/licenses/>.

The complete GNU General Public License Notice can also be found in
the 'COPYING' file in the root directory.


======================
 Introduction to Olena
======================

Olena_, a platform dedicated to image processing.

.. _Olena: http://olena.lrde.epita.fr


Overview
========

Olena is a platform dedicated to image processing.  At the moment it is
mainly composed of a C++ library: Milena.  This library features many
tools to easily perform image processing tasks.  Its main
characteristic is its genericity: it allows to write an algorithm once
and run it over many kinds of images (gray scale, color, 1D, 2D, 3D,
...).

Olena is a project developed by the `EPITA Research and Development
Laboratory (LRDE)`__ since 1997.  We did numerous prototypes and
throwaway experiments before settling into the kind of programming
paradigm which is finally here.

__ http://www.lrde.epita.fr

We do our image processing research using this library, but most
importantly we have gathered (and still do) generic programming
expertise from the library development.

Yet, Olena is an ongoing development project.  Few algorithms or
definitions may change in a near future.  A list of potential changes
is maintained here :
https://olena.lrde.epita.fr/FeaturesSubjectToChange.

Likewise, the documentation does not cover the whole project yet.  In the
`doc/' directory you will find the first draft of a reference
manual.  It includes a quick reference guide and a tutorial.  This is a
good start.  In `milena/tools' and `milena/doc/examples' few sample
programs are available.  Most of them are already used to illustrate
the tutorial.   For the rest, we're afraid you will have to dig the
code or e-mail us.

   Please direct any question or comments to <olena@lrde.epita.fr>, or
<olena-bugs@lrde.epita.fr>.

   Olena also has a web page, located at
<http://olena.lrde.epita.fr>.


Installation
============

To install Olena on your system, type in the classical sequence at
the command prompt::

	./configure
	make
	make install (as root)

Note that an installation is  specific to the compiler used to install
it.  Indeed, the call  to ``./configure`` enables some workarounds and,
consequently,  users must  compile  with the  same  compiler to  avoid
compatibility problems.

Between ``make`` and ``make install``, you may also want to run::

	make check

 ``make check`` will run the test suite to check the whole library.
Running the test suite may require up several hours.


Please read the INSTALL file for more information about building and
installing Olena.


Additional Features
-------------------

Swilena is an optional component of Olena exposing Milena to other
languages thanks to the Simplified Wrapper and Interface Generator
(SWIG_).

.. _SWIG: http://www.swig.org

For the moment, only some Python_ bindings are provided.  They are
disabled by default because they require extra dependencies (SWIG and
Python).

.. _Python: http://www.python.org

To enable the installation of this module use::

       ./configure --enable-swilena

Sample tools are shipped with the tarball. To enable the installation of
these tools use::

       ./configure --enable-tools

Sample applications are shipped with the tarball.  To enable the
installation of these applications use::

       ./configure --enable-apps


To read/write TIFF images with Olena, libtiff is required.  If
``configure`` is unable to find libtiff on your system, you can help
it by specifying the base directory of libtiff, e.g.::

       ./configure --with-tiff=/usr/local


To read/write DICOM images with Olena, GDCM is required.  Likewise,
you can tell ``configure`` where to find it by giving its install
prefix, e.g.::

       ./configure --with-gdcm=/usr/local

Olena use Magick++ to read and write images in common formats.  As for
other optional dependencies, you can specify where it is located (if
needed) at configuration time::

       ./configure --with-magickxx=/usr/local/


Layout of the Tarball
---------------------

The Olena project directory layout is as follows:

build-aux
   Auxiliary tools used by the GNU Build System during ``configure``
   and ``make`` stages.

external
   Sources of Shipped dependencies.


m4
   Extra Autoconf macros.

milena

  apps
     Application examples.

  mln
     Headers of the Milena library.

  tests
     The test suite.

  doc
     The documentation.

  tools
     Example tools.

  mesh
     Some 3D meshes, mostly used for test purpose.

  img
     Some (2D) images, mostly used for test purpose.

  demos
     Demos of Milena.


swilena
   

  python
     Some Python bindings for Milena.


Requirements
============

Olena has been tested on the following configurations:

===========================  =============================================
System                       Compiler
===========================  =============================================
GNU/Linux on IA-32           g++ (GNU GCC) 3.3, 3.4, 4.0, 4.1, 4.2 and 4.3
GNU/Linux on IA-32           icpc (Intel C/C++ Compiler) 10.1 and 11.0
GNU/Linux on AMD64/Intel 64  g++ (GNU GCC) 4.1
Mac OS X (10.5) on IA-32     g++ (GNU GCC) 4.0.1
===========================  =============================================


According to the wanted features, some dependencies may be required:


To enable I/O with TIFF images, `libtiff`_ must be installed.

.. _libtiff: http://www.libtiff.org/

To enable I/O with GDCM images, `GDCM`_ must be installed.

.. _GDCM: http://sourceforge.net/apps/mediawiki/gdcm/

To support many image formats in Olena's I/O system, `Magick++`_ must
be installed.

.. _Magick++: http://www.imagemagick.org/Magick++/

The Boost Tuple Library from the `Boost`_ Project is needed if you
want to support tuple accumulators.

.. _Boost: http://www.boost.org/

Apart from GDCM, these dependencies are commonly provided by the
package management systems (e.g., Debian's APT, Mac OS X's Mac Ports,
etc.).  We recommend using package managers instead of installing
dependencies by hand.


See Also
========

There are other sources of interest in the distribution.

- Headline news about the project can be found in the file ``NEWS`` at
  the root of the source tree.

- The library reference HTML documentation, generated by Doxygen_, is
  located in ``doc/user/html/``.

.. _Doxygen: http://www.doxygen.org


License
=======

Olena is released under the GNU General Public Licence.  See the file
``COPYING`` (at the root of the source tree) for details.


Contacts
========

The team can be reached by mail at olena@lrde.epita.fr.  The snail
mail address follows.

* Olena - LRDE

  | Laboratoire de Recherche et Développement de l'EPITA (LRDE)
  | 14-16 rue Voltaire
  | FR-94276 Le Kremlin-Bicêtre CEDEX
  | France


Bibliography
============

Further information about Olena can be found into the following related
papers.

About Image Processing Programming:

   * `Milena: Write Generic Morphological Algorithms Once, Run on Many
     Kinds of Images`.  Roland Levillain, Thierry Géraud, Laurent
     Najman.  In the proceedings of the 9th International Symposium on
     Mathematical Morphology (ISMM) http://www.cs.rug.nl/~ISMM09/
     Groningen, The Netherlands August 24 - 27, 2009.

   * `Generic Algorithmic Blocks Dedicated to Image Processing`,
     Jérôme Darbon, Thierry Géraud, Patrick Bellot.  In the proceedings
     of ECOOP PHD Oslo, Norway, June 2004.

   * `Generic Implementation of Morphological Image Operators`, Jérôme
     Darbon, Thierry Géraud, and Alexandre Duret-Lutz, submitted to
     International Symposium On Mathematical Morphology VI (ISMM
     2002), April 3-5, 2002, Sydney, Australia.

   * `Applying Generic Programming to Image Processing`, Thierry
     Géraud, Yoann Fabre, and Alexandre Duret-Lutz.  In the
     Proceedings of the IASTED International Conference on Applied
     Informatics (AI'2001) - Symposium Advances in Computer
     Applications, ACTA Press, pages 577-581, Innsbruck, Austria,
     February 2001.

   * `Obtaining Genericity for Image Processing and Pattern
     Recognition Algorithms`.  Thierry Géraud, Yoann Fabre, Alexandre
     Duret-Lutz, Dimitri Papadopoulos-Orfanos, and Jean-François
     Mangin.  In the Proceedings of the 15th International Conference
     on Pattern Recognition (ICPR'2000), IEEE Computer Society,
     vol. 4, pages 816-819, Barcelona, Spain, September 2000.

About Generic Programming Paradigm:

   * `Semantics-Driven Genericity: A Sequel to the Static C++
     Object-Oriented Programming Paradigm (SCOOP 2)`.  Thierry Géraud,
     Roland Levillain.  In the proceedings of the 6th International
     Workshop on Multiparadigm Programming with Object-Oriented
     Languages
     http://homepages.fh-regensburg.de/~mpool/mpool08/welcome.html
     Paphos, Cyprus July 7, 2008.

   * `Static C++ Object-Oriented Programming (SCOOP)`, Nicolas Burrus,
     Alexandre Duret-Lutz, Thierry Géraud, David Lesage, and Raphaël
     Poss.  In the Proceedings of the Workshop on Multiple Paradigm
     with OO Languages (MPOOL'03) Anaheim, CA, October 2003.

   * `Generic Design Patterns in C++`.  Alexandre Duret-Lutz, Thierry
     Géraud, and Akim Demaille.  In the Proceedings of the 6th USENIX
     Conference on Object-Oriented Technologies and Systems
     (COOTS'2001), pages 189-202, San Antonio, Texas, USA,
     January-February 2001.

   * `Olena: a Component-Based Platform for Image Processing, mixing
     Generic, Generative and OO Programming`.  Alexandre Duret-Lutz.
     In the Proceedings of the 2nd International Symposium on
     Generative and Component-Based Software Engineering (GCSE 2000),
     Young Researchers Workshop (published in "Net.ObjectDays2000";
     ISBN 3-89683-932-2), pages 653-659, Erfurt, Germany, October
     2000.


   You can download these papers and related materials from
<http://www.lrde.epita.fr/cgi-bin/twiki/view/Publications>



.. Local Variables:
.. mode: rst
.. End:
