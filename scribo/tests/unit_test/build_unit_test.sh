#! /bin/sh

## FIXME: Don't use `echo -n', as echo's options are not portable.
##
## http://www.gnu.org/software/autoconf/manual/html_node/Limitations-of-Builtins.html#Limitations-of-Builtins
##
## As an ugly workaround, use `printf' instead.  The right approach
## would be to only emit lines ended with newlines.
ECHO_N=printf

# Use the C locale to have a deterministic sort.
export LC_ALL=C

test $# -eq 1 || { echo "Usage: $0 <scribo path>" && exit 1; }

## FIXME: Ouch!  Using `find' properly can probably save us some pipes,
## forks and characters here.
HEADERS=`find $1 -name "*.hh" \
	| grep -vE "*.spe.hh" \
	| grep -v "recognition" \
	| grep -v "demo" \
	| sort \
	| sed -e 's/.*\/scribo\/\(.*\)/scribo\/\1/g' \
	| sed 's/\.\.\/\.\.\///g'`

output=unit-tests.mk

rm -f "$output"
rm -f scribo_*.cc

# Build unit-tests.mk.
echo "## Generated by $0, do not modify." >"$output"
echo >>"$output"
$ECHO_N "check_PROGRAMS = " >>"$output"

for i in $HEADERS; do
    FILE_CC=`echo $i | sed 's/[/.]/_/g' | sed 's/_hh/\.cc/g'`

    # Build .cc.
    cat > $FILE_CC << EOF
// Unit test for $i.
// Generated by $0, do not modify.

// Include the file twice, so we detect missing inclusion guards.
#include <$i>
#include <$i>

int main()
{
  // Nothing.
}
EOF

    # Build unit-tests.mk.
    TARGET=`echo "${FILE_CC}" | sed 's/\.cc//'`
    echo " \\" >>"$output"
    $ECHO_N "${TARGET}" >>"$output"
done

# Build "$output".
echo "" >>"$output"
echo "" >>"$output"
for i in $HEADERS; do
    FILE_CC=`echo $i | sed 's/[/.]/_/g' | sed 's/_hh/\.cc/g'`
    NAME=`echo $FILE_CC | sed 's/\.cc//g'`
    echo "${NAME}_SOURCES = $FILE_CC" >>"$output"
done
