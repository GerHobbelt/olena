#! /bin/sh

## FIXME: Don't use `echo -n', as echo's options are not portable.
##
## http://www.gnu.org/software/autoconf/manual/html_node/Limitations-of-Builtins.html#Limitations-of-Builtins
##
## As an ugly workaround, use `printf' instead.  The right approach
## would be to only emit lines ended with newlines.
ECHO_N=printf


test $# -eq 1 || { echo "Usage: $0 <mln path>" && exit 1; }

## FIXME: Ouch!  Using `find' properly can probably save us some pipes,
## forks and characters here.
HEADERS=`find $1 -name "*.hh" | grep -vE "*.spe.hh" | grep -v "mln/core/concept/doc" | sed -e 's/.*\/mln\/\(.*\)/mln\/\1/g' | sed 's/\.\.\/\.\.\///g'`

rm -f Makefile.am
rm -f mln_*.cc

# Build Makefile.am.
## FIXME: How about using a here-doc instead of `echo'?
echo "## Process this file through Automake to create Makefile.in -*- Makefile -*-" >> Makefile.am
echo ""                                             >> Makefile.am
echo "include \$(top_srcdir)/milena/tests/tests.mk" >> Makefile.am
echo ""                                             >> Makefile.am
$ECHO_N "check_PROGRAMS = "                         >> Makefile.am

for i in $HEADERS; do
    FILE_CC=`echo $i | sed 's/[/.]/_/g' | sed 's/_hh/\.cc/g'`

    # Build .cc.
    cat > $FILE_CC << EOF
// Unit test for $i.
// Generated by $0, do not modify.

// Include the file twice, so we detect missing inclusion guards.
#include <$i>
#include <$i>

int main()
{
  // Nothing.
}
EOF

    # Build Makefile.am.
    TARGET=`echo "${FILE_CC}" | sed 's/\.cc//'`
    echo " \\" >> Makefile.am
    $ECHO_N "${TARGET}" >> Makefile.am
done

# Build Makefile.am.
echo "" >> Makefile.am
echo "" >> Makefile.am
for i in $HEADERS; do
    FILE_CC=`echo $i | sed 's/[/.]/_/g' | sed 's/_hh/\.cc/g'`
    NAME=`echo $FILE_CC | sed 's/\.cc//g'`
    echo "${NAME}_SOURCES = $FILE_CC" >> Makefile.am
done
echo "" >> Makefile.am
echo "TESTS = \$(check_PROGRAMS)" >> Makefile.am
