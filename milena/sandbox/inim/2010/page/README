Donc ce que l'on a fait consiste en troix parties:
     - Niveaux de gris.
     - Binarisation.
     - Detection des colonnes de texte.

- Niveaux de gris:
  Pas besoin de trop d'explications ici je pense.

      void binarization::grayscale(const image2d<rgb8>& src,
                                   image2d<int_u8>& dst)

- Binarisation:
  On a effectue une binarisation de Sauvola qui est un algo de seuillage
  local (vs global comme Otsu) en se servant d'"Integral Images" pour que
  ca trace un peu plus que l'algo de base. Cet Algo retourne une image
  de booleens avec en blanc les elements de l'image et en noir le reste.
  Il n'a pas de problèmes particulier si ce n'est que si l'image est trop
  grosse (vraiment très grosse) avec pleins d'aplat de blanc, on
  va dépasser la capacité maximale des unsigned long long utilisés pour les
  Integral Images. Un lien vers le papier de référence sur Sauvola:
           http://pubs.iupr.org/DATA/2007-IUPR-11Sep_1129.pdf

  La fonction maintenant, avec `w` étant le parametre de taille
  de la fenetre utilisée pour les calculs de seuillages locaux: 

     void binarization::sauvola_threshold(const image2d<rgb8>& src,
                                          image2d<bool>& dst,
                                          unsigned int w);

  Pour info, Ocropus utilise le même algo sauf que pour déterminer les
  parametres optimaux pour une image, ils font plusieurs binarisations
  et segmentation jusqu'à ce qu'ils considérent que le résultat soit
  bon.
  

- Whitespace:

  On procéde par la recherche des plus grandes zones blanches dans
  l'image binarisées. C'est un algo itératif qui cherche à merger
  des composantes connexes pour avoir les plus grands aplats de
  couleur. Le résultat, c'est que à partir d'une image binarisée,
  on va donner une autre image binarisée avec en blanc les colones
  et paragraphe de texte et en noir le fond.

  void whitespace::whitespace_compute (image2d<bool>& src,
                                       image2d<bool>& dst);


Hésitez pas à nous spammer pour toute forme de questions
la dessus!
 
