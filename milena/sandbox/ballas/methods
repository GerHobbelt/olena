 -*- Outline -*-

* without optimization flags

** Benchmark

compilation: 2.131
execution:   18.538
total:       22.670


* O1

** Benchmark
compilation: 3.616
execution:   4.893
total:       8.509

* O2
** Benchmark
compilation: 4.610
execution:   3.781
total:       8.391

* 03
compilation: 5.071
execution:   1.567
total:       6.638




The next part introduces different method to speed up C++ compilation time.

Test are made with union_find.cc file.

* precompiled header (without optimization option)

** Description

Generate precompiled header (.gch) which can parsed  in a faster way by g++.


How to automize header precompilation, just make a precompilation of usefull header ?

** Benchmark

compilation: 3.733
execution:   18.119
total:       21.852

* ccache  (without optimization option)

** Description

"ccache is a compiler cache. It acts as a caching pre-processor to C/C++ compilers, using the -E compiler switch and a hash to detect when a compilation can be satisfied from cache. This often results in a 5 to 10 times speedup in common compilations." http://cache.samba.org

** Benchmark

* Vacauson Way  (without optimization option)

** Description

cf: http://www.lrde.epita.fr/cgi-bin/twiki/view/Know/SpeedUpCxxCompilation


*** total recompilation protocol of source.cc:
--> (1) compile source.cc to "ref".o (cache used for function addresse reference)
--> (2) source.cc ->  source.o with -DINTERFACE_ONLY (real program)
--> (3) links source.o to "ref".o

*** Protocole:
--> do (1)
--> do (2) and (3) as long as there is no linkage error, else redo (1)


*** Problems:

You must recompile the cache when you use an new algorithm/data type in your program.
--> solution: ask developper to write usefull algorithm/data types/includes at the start of the programm and uses template instantiation


Automatization??
--> how deals with several files
--> how deals with missing .hh files
--> differenciate link error from other error

***Others things:

wrapper script or Makefile???
--> script used by Makefile

** Benchmark

*** first compilation or total recompilation is longer than a normal compilation

you need to compile program two times


*** next time when cache recompilation is not needed

compilation: 0.200
execution:   17.875
toto:        18.075
