		-*- outline -*-


* image interface

** at a glance

ima :  domain ->  destination
       p      ->  ima(p)


object            type
---------------------------
ima               I

ima.domain        I::pset
ima.destination() I::vset

p		  like I::site
ima(p)            like I::value


impl detail:
signature is "ima(p : psite) : rvalue"


** about domain, site, and psite

*** need for psite

Sometimes, accessing a value in constant-time complexity, O(1), is not
possible with a site object.

Example with a run-length encoded image :

    c  6 7 8 9
   r
      +-+-+-+
   3  | |x| |
      +-+-+-+-+
   4      | | |
          +-+-+

The site x is the point (3, 7).  The image values are stored in a
multi-array where the first index is the one of the run and the second
index the offset of the cell from the beginning of the run.  The site
x thus corresponds to the cell (0, 1).

    j= 0 1 2
      +-+-+-+
i= 0  | |x| |
      +-+-+-+-+
i= 1      | | |
          +-+-+
        j= 0 1

Here we have:

  I::site == point2d  but  I::psite == run_point2d

where, roughly, run_point2d = { i_of_run, i_in_run, run_ptr }.


*** from psite to site

Consider that we have an image type I such as I::site != I::psite.  In
that case, an object of type I::psite is convertible towards an object
of type I::site.  Furthermore, a psite shall behave as if it was a
site.

Design note: it seems impossible to offer through the interface of
some psite what is expected from its corresponding site.  For
instance, when a site has a given feature, say a method "m", then this
method has to appear in the psite interface.  Idea: thanks to
inheritance, we fetch an interface + an implementation that delegates
to the site.

Example: run_point2d has a method ::row() because point2d provides
such a method.  How it works: a psite inherits from
internal::site_impl<site> which is specialized for every site type;
for instance, internal::site_impl<point2d> owns the method "coord
row() const" which is defined as "return exact(this)->to_site().row()"

This is of course only true for read-only methods.


*** site location

A point of a space (the 2D plane or 3D space) is about equivalent to a
vector.  We do not distinguish between those two notions: a point M is
like the vector OM where O is the origin of the space.

We have mln::vec<dim,coord> (space vector) built over
metal::array<n,T> (static container).  When dim = 2, we have vec::x()
and vec::y() to access the coordinates, in addition to the more
general method vec::op[](i).  On the other side, we have
array::element<i>() to access the i-th element.

We do not ambiguity: grid point 2d (i,j) v. 2D plane point
(x,y) v. 2D vector (x,y)

ideas: gpoint2d v. spoint2d !!!


*** iterating and ordering

The iteration mechanism for images is directly derived from the
mechanism for site set.  A site set is iterable in a forward way.
This way depends on the structure of the set; Cf. the documentation.
The reserve iteration way, called backward, can always be defined
because we only provide bidirectional containers.  The ordering
relationship corresponding to the forward iteration browsing is
"fwd_less".

The basic iterator has the only property of browsing every site once.
It is often identical to the forward iterator but it is not a
requirement.  FIXME: find an example where it is not the case.

When sites are localized, a special ordering between such sites is
defined, based on the site localization.  More precisely, it is a
lexicographical ordering considering the coordinates going from the
first component (at index 0) to the last one (at index dim - 1).  This
is location_less.  In most cases, we cannot provide an iterator that
follows this spatial ordering because the underlying structures are
usually not suited for such an iterator to be efficient.

FIXME: hypothesis and property for superior_window and inferior_window.


*** arithmetics over sites

psite + dpsite -> psite when compatible (?)
 site + dpsite = (re-written) site + dsite (when possible) -> site
psite +  dsite = (re-written) site + dsite (when possible) -> site

Example:
run_psite2d + dpoint2d -> point2d


FIXME: more examples


** about value, rvalue, and lvalue

Image types provide a method to access values, namely "operator() const".
Yet, its signature is NOT "value operator()(const site& p) const"
but "rvalue operator()(const psite& p) const"

For instance, with I being image2d<int_u8>, we have :

    I::value == int_u8  but  I::rvalue == const int_u8&

so copying the value when the call "f(p)" returns is avoided.
In that case, it is a low-level implementation issue that makes rvalue
be different from value.  In some other cases, the difference can be
more fundamental.  For instance, a proxy is returned so that some extra
code is performed if this value is eventually read (FIXME: take a better
example).


** about destination

ima.destination is a set.  Every value, that is ima(p) with p in
ima.domain, is taken from this set.  For instance, a color image can
be defined with the destination being of type value::set<rgb_3x8>.

Classically, some image types are defined by couples (p,v) where v =
ima(p).  A given cell, location in RAM or in a file, corresponds to a
point p and stores the corresponding value.  So when we have N points,
we also have N value cells.  To iterate over pixel values, we then
iterate over the definition domain and access values through ima(p):

code A)
  for all p of ima.domain
  | v = ima(p)
  | print v.

The set of possible taken values in ima is the destination set.  If
this set has a reasonable size, we can iterate over:

code B)
  for all v of ima.destination
  | print v.

Sometimes, the number of value cells is much less than the number of
points.  To access the image values, it is more efficient to iterate
over those cells:

code C)
  for all v of ima.values
  | print v.

For such image types, we have several points (sites) associated with a
single value cell.  It is rather different from having couples (p,v);
we actually have one value cell -> a set of points.  Such data
structure allows for compressing data because each value cell is
shared by several points.

*** Example 1

Consider for instance the following image:

+-----+
| 2   |
|  111|
|  22 |
+-----+

We have one value per run.

The value type is int_u2 (unsigned integer on 2 bit), that is, the
type of the interval [0,3] of N.  The image is defined by a run-length
encoding with a single value per run.  Precisely, this image is:

{ ((a,1),2), ((b,3),1), ((c,2),2) }
    ^^^  ^
1st run  |
        value of the 1st run

where a, b, and c designate the respective starting point of each run:

+-----+
| a   |
|  b  |
|  c  |
+-----+

It leads to:
  code A) 211122  because we browse points
  code B) 0123    because we browse [0,3]N
and with :
  code C) 212     because we browse the image value cells;
                  those cells are depicted below.
                           v          v          v
                  { ((a,1),2), ((b,3),1), ((c,2),2) }

**** A clue?

***** part 1

When we have value cells, it is usually related to the fact that the
image is not point-wise writable.  For instance, with the image type
having one value per run, the operation "ima(p) := v" is not possible.
Otherwise, that would mean that a run is split on such a write access,
which is too slow (thus not allowed).

Some rare image types can be both point-wise writable and value cell
iterable.  For instance:

  image<int_u8> data;
  map<int_u8, rgb_3x8> lut; // with i != j => lut[i] != lut[j]
  map<rgb_3x8, int_u8> reverse_lut;

The keys, resp. the values, of the lut are the values, resp. the keys,
of the reverse_lut.  With this structure, we can have a rather efficient
point-wise writable image.

ima(p) <- v {
  it <- reverse_lut.find(v)
  if (it is not found)
     ++n
     lut(n) <- v
     reverse_lut(v) <- n
     data(p) <- n
  else
    data(p) <- it.key
}

***** part 2

When an image is value-wise writable, we can form:
  ima.value(red) = blue;
It means that we can quickly access to the cell (or the cells)
having the value 'red'.

When an image is value-cell writable, we can have:
  for v in ima.values()
    ima.cell(v) = v'
In that case, a 'v' is a value cell, not a value.

***** part 3

Is the notion of value-wise readable relevant?
  ima.value(red) // read-access
gives:
   - red, which is dummy!
or - the corresponding point set, which can be great!

This is another property...


*** Example 2

Consider this image type:

{ data =
    +-----------+
    | 0 2 1 0 2 |
    | 0 0 3 2 1 |
    | 2 1 2 2 0 |
    +-----------+;
  lut =
    +---+---------------+
    | 0 | (255,  0,  0) |  red (r)
    | 1 | (127,127,127) |  medium grey (m)
    | 2 | (  0,  0,255) |  blue (b)
    | 3 | (127,127,127) |  medium grey (m) again
    +---+---------------+
}

This image is defined with a look-up table; its external
representation actually is:

    +-----------+
    | r b m r b |
    | r r m b m |
    | b m b b r |
    +-----------+

(conversely, the internal representation is the 'data' image.)

We have I::value == rgb_3x8
so the image appears to be highly quantized (24 bit).

Yet the number of possible values is limited (here up to 4, even if
two value cells are identical) and stored by the image in the look-up
table.

It leads to:
  code A) rbmrbrrmbmbmbbr
  code B) rmb
  code C) rmbm

ima.destination (browsed by code B) is an instance of
value::subset<rgb_3x8>.

FIXME: OR (?)

It leads to:
  code A) rbmrbrrmbmbmbbr
  code B) impossible because 24bit data
  code C) rmbm

and I.destination gives value::set<rgb_3x8>.


** associated types

*** list of associated types

mesh  (? support)
pset  (? domain_t)
site
psite

value
rvalue
lvalue
vset

coord
dpoint

fwd_piter
bkd_piter

skeleton

*** value
Type of values enclosed in the image container.
By copie; not by reference (not T&).
Might be a pointer (T*).
Assignable and copiable (not a shallow copy).

Ex: int_u8, etc.

*** site
Type of the cell containing a value.

*** required for implementation purpose
rvalue, lvalue, and psite; see later.

*** location
A site can be localized into a given space, e.g., the 2D plane and can
be point-wise.  In that case, the associated type "location" gives the
corresponding type of space vector.  For instance, with a classical 2D
image, a site is a 2D point (node of the regular square grid) and the
location is trivially a vector of the 2D plane.

When a site is not point-wise, some implementation can also provide a
location; this can be convenient in order to get a spacial
representation of sites and images.  For instance, consider that we
have a tesselation computed from point seeds (a Voronoi diagram for
instance) and a structure (the corresponding Delaunay triangulation)
where a site is a tile of this tesselation.  A tile can be identified
without ambiguity through its seed; this seed point is then the
representative point for that tile.  By extension, we can state that
the location of a tile is its seed.

For some image types, sites are not localized and a special type is
used to define ::location.



** methods

*** about the image variable

**** has_data

sig is:
bool has_data() const

is "is_allocated" / "is_ready" a better name?

Nota bene: "is_initialized" is consistent with the "initialize"
routine; yet, it means "has relevant data", which is not really
what it meant!

**** name_it(string)

Later...

*** about definition domain

**** domain
const pset& domain() const

**** has & owns_

bool has(const psite& p) const
bool owns_(const psite& p) const

Major question: is ima.has(p) equivalent to ima.domain().has(p)?  or
(if it is equivalent) do we feature a specific method has_extended()?

Remember that in the case of a window, we want to write:

for_all(p)
  for_all(q)
    if (ima.has(q))
      ..

so that there is a decoupling between a window and an image.  More
precisely a site q of a window centered at p can lay outside the
definition domain, thus we need the "has" test.  Such a decoupling is
great since we can reuse some window or neighborhood definition over a
domain which is compatible but restricted.  This is also true for a
graph on which some window (resp. neighborhood) is defined and can be
applied over a sub-graph.

The owns_ method is weird because it is only internal.

**** suggestion

"has(p)" means that there is a value for p.  The set of sites p that
verify "has(p) = true" is the "extended domain."  Some image types
features such an extension; some other do not.

We always have:
  ima.domain().has(p)   =>  ima.has(p)

If the image ima does not extend the definition domain, we have:
  ima.domain().has(p)  <=>  ima.has(p)

A site p is in the extended domain iff:
  ima.has(p) and not ima.domain().has(p).

*** about data access

rvalue operator()(const psite& p) const
lvalue operator()(const psite& p)

*** about destination space

const vset& destination() const // was: values()

*** obsolete methods

**** bbox

const box_<point>& bbox() const

too ambiguous because we want a bounding box:
- either precise or approximative (larger)
- on a grid (if possible)
- on the space (if sites are located)

remember that some image have sites that are not localized (and then a
bbox, if it exists, can only be a index range for instance)

**** npoints

std::size_t npoints() const
is useless since the user can write ima.domain().nsites()


* properties


** general


*** category
|
+ -- primary
|
+ -- /morpher/
       |
       + -- identity_morpher
       |
       + -- domain_morpher
       |
       + -- value_morpher

**** primary

Image type instantiable at the first place (without any prior image
being defined).

**** morpher

Image type that relies on another image type or on several
ones; it looks like M<I>.  In the following, ima' (of type I') is a
morpher instance where ima (of type I) is the underlying pre-existing
image.

**** domain_morpher

A morpher that only changes the definition domain;
we have ima'.domain != ima.domain but I'::value == I::value and
for all p in ima'.domain inter ima.domain, ima'(p) == ima(p).

The resulting domain can be larger or smaller than the first one.

FIXME: What about changing only the "extended domain" (via modifying
the behavior of owns_)?

**** value_morpher

A morpher that only changes the values; we have ima'.domain ==
ima.domain but the function ima' is different from ima because either
some values change (for some p, ima'(p) != ima(p)) or the type of
values change.

**** identity_morpher

A morpher that does not change the domain nor the values.
So ima'.domain == ima.domain and for all p, ima'(p) == ima(p).



** related to value


*** kind
|
+ -- color
|
+ -- gray
|
+ ----------- label
|              |
|              +-- named
+ -- /logic/   |
|      |       |
|      + -- /mvlogic/
|      |      |
|      |      + -- binary
|      |      |
|      |      + -- ternary
|      |
|      + -- fuzzy
|
+ -- data
|
|
+ -- /map/
       |
       + -- distance

FIXME: Apply change on mln.
IDEA: map or field (for deformation field).

Nota bene: mvlogic stands for "multi-valued logic".


*** quant
|
+ -- low
|
+ -- high

**** low

I::value defines a set of possible values whose cardinality is less
than or equal to 2^16.

FIXME: OR (?)

I.destination (same definition)


*** value
|
+ -- scalar
|
+ -- vectorial
|
+ -- structed
|
+ -- pointer

FIXME: Make the difference between homogeneous and heterogeneous
vectors...



** related to pset


*** access
|
+ -- random
|
+ -- browsing


*** space
|
+ -- one_d
|
+ -- two_d
|
+ -- three_d


*** size
|
+ -- huge
|
+ -- regular


*** support
|
+ -- irregular
|
+ -- regular
       |
       + -- aligned


** global


*** border
|
+ -- none
|
+ -- /some/
       |
       + -- stored
       |
       + -- computed


*** neighb
|
+ -- none
|
+ -- /some/


*** data
|
+ -- stored
|     |
|     + -- semilinear
|           |
|           + --  oneblock
|
+ -- computed

Was: stored > linear > raw.

FIXME: What about mmap?


*** io
|
+ ------------------------ /read/
|                            | \
|                            |  + -- read_only
|                            |
+ -- /write/                 |
       | \                   |
       |  + -- write_only    |
       |                     |
        \_________________   |
                           \ |
                          read_write

*** speed
|
+ -- slow
|
+ -- fast
      |
      + -- fastest

fastest = (    data    = oneblock
           and border  = stored
           and support = aligned
           and size    = regular )


* primary images

** image2d<T>

regular square grid where grid nodes are objects of type point2d =
(row, col), a couple of integer coordinates

psite = point2d == point_<grid2d,int>
site  = point2d
location = vec<2,int> (more precise than vec<2,float>)

** fun_image<S,F>

pset = S
f : p -> v
read_only


** geometrical transformation (morpher)

An image computed on the fly from another image on which a geometrical
transformation is applied.  A geometrical transformation is either a
function

  site_set   ->  site_set
    site    |->    site

or a function

  site_set_in   ->  site_set_out
    site_in    |->    site_out

In the first case, the resulting image has the same point set as the
initial image (example : clock-wise rotation of 90°, translation of a
vector with integral coordinates).

In the second case, the resulting image has a different point set,
reflecting a possibly different domain or topology (example: arbitrary
rotation).


images (f, T) -> g


g(p) = f( T(p) )
so :
g( T_1(p) ) = f(p)

or :

g( T(p) ) = f(p)


FIXME: to be continued.

* value morpher

FIXME
